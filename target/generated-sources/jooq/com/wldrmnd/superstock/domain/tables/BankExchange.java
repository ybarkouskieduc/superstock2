/*
 * This file is generated by jOOQ.
 */
package com.wldrmnd.superstock.domain.tables;


import com.wldrmnd.superstock.domain.Indexes;
import com.wldrmnd.superstock.domain.Keys;
import com.wldrmnd.superstock.domain.Superstock;
import com.wldrmnd.superstock.domain.tables.records.BankExchangeRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankExchange extends TableImpl<BankExchangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>superstock.bank_exchange</code>
     */
    public static final BankExchange BANK_EXCHANGE = new BankExchange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankExchangeRecord> getRecordType() {
        return BankExchangeRecord.class;
    }

    /**
     * The column <code>superstock.bank_exchange.id</code>.
     */
    public final TableField<BankExchangeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>superstock.bank_exchange.bank_id</code>.
     */
    public final TableField<BankExchangeRecord, Long> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange.currency_in</code>.
     */
    public final TableField<BankExchangeRecord, String> CURRENCY_IN = createField(DSL.name("currency_in"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange.rate</code>.
     */
    public final TableField<BankExchangeRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.DECIMAL(15, 2).nullable(false).defaultValue(DSL.inline("1.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>superstock.bank_exchange.created_at</code>.
     */
    public final TableField<BankExchangeRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(0).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange.currency_out</code>.
     */
    public final TableField<BankExchangeRecord, String> CURRENCY_OUT = createField(DSL.name("currency_out"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange.fee</code>.
     */
    public final TableField<BankExchangeRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    private BankExchange(Name alias, Table<BankExchangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankExchange(Name alias, Table<BankExchangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>superstock.bank_exchange</code> table reference
     */
    public BankExchange(String alias) {
        this(DSL.name(alias), BANK_EXCHANGE);
    }

    /**
     * Create an aliased <code>superstock.bank_exchange</code> table reference
     */
    public BankExchange(Name alias) {
        this(alias, BANK_EXCHANGE);
    }

    /**
     * Create a <code>superstock.bank_exchange</code> table reference
     */
    public BankExchange() {
        this(DSL.name("bank_exchange"), null);
    }

    public <O extends Record> BankExchange(Table<O> child, ForeignKey<O, BankExchangeRecord> key) {
        super(child, key, BANK_EXCHANGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Superstock.SUPERSTOCK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BANK_EXCHANGE_BANK_ID);
    }

    @Override
    public Identity<BankExchangeRecord, Long> getIdentity() {
        return (Identity<BankExchangeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BankExchangeRecord> getPrimaryKey() {
        return Keys.KEY_BANK_EXCHANGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BankExchangeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANK_EXCHANGE_IBFK_1);
    }

    private transient Bank _bank;

    /**
     * Get the implicit join path to the <code>superstock.bank</code> table.
     */
    public Bank bank() {
        if (_bank == null)
            _bank = new Bank(this, Keys.BANK_EXCHANGE_IBFK_1);

        return _bank;
    }

    @Override
    public BankExchange as(String alias) {
        return new BankExchange(DSL.name(alias), this);
    }

    @Override
    public BankExchange as(Name alias) {
        return new BankExchange(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankExchange rename(String name) {
        return new BankExchange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankExchange rename(Name name) {
        return new BankExchange(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, BigDecimal, Timestamp, String, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
