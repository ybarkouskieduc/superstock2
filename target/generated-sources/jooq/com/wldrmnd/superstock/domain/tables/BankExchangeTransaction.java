/*
 * This file is generated by jOOQ.
 */
package com.wldrmnd.superstock.domain.tables;


import com.wldrmnd.superstock.domain.Keys;
import com.wldrmnd.superstock.domain.Superstock;
import com.wldrmnd.superstock.domain.tables.records.BankExchangeTransactionRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankExchangeTransaction extends TableImpl<BankExchangeTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>superstock.bank_exchange_transaction</code>
     */
    public static final BankExchangeTransaction BANK_EXCHANGE_TRANSACTION = new BankExchangeTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankExchangeTransactionRecord> getRecordType() {
        return BankExchangeTransactionRecord.class;
    }

    /**
     * The column <code>superstock.bank_exchange_transaction.id</code>.
     */
    public final TableField<BankExchangeTransactionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.user_id</code>.
     */
    public final TableField<BankExchangeTransactionRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.bank_id</code>.
     */
    public final TableField<BankExchangeTransactionRecord, Long> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.currency_in</code>.
     */
    public final TableField<BankExchangeTransactionRecord, String> CURRENCY_IN = createField(DSL.name("currency_in"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>superstock.bank_exchange_transaction.currency_out</code>.
     */
    public final TableField<BankExchangeTransactionRecord, String> CURRENCY_OUT = createField(DSL.name("currency_out"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.amount_in</code>.
     */
    public final TableField<BankExchangeTransactionRecord, BigDecimal> AMOUNT_IN = createField(DSL.name("amount_in"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.amount_out</code>.
     */
    public final TableField<BankExchangeTransactionRecord, BigDecimal> AMOUNT_OUT = createField(DSL.name("amount_out"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.rate</code>.
     */
    public final TableField<BankExchangeTransactionRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.created_at</code>.
     */
    public final TableField<BankExchangeTransactionRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(0).nullable(false), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.fee</code>.
     */
    public final TableField<BankExchangeTransactionRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>superstock.bank_exchange_transaction.reverted_at</code>.
     */
    public final TableField<BankExchangeTransactionRecord, Timestamp> REVERTED_AT = createField(DSL.name("reverted_at"), SQLDataType.TIMESTAMP(0), this, "");

    private BankExchangeTransaction(Name alias, Table<BankExchangeTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankExchangeTransaction(Name alias, Table<BankExchangeTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>superstock.bank_exchange_transaction</code> table
     * reference
     */
    public BankExchangeTransaction(String alias) {
        this(DSL.name(alias), BANK_EXCHANGE_TRANSACTION);
    }

    /**
     * Create an aliased <code>superstock.bank_exchange_transaction</code> table
     * reference
     */
    public BankExchangeTransaction(Name alias) {
        this(alias, BANK_EXCHANGE_TRANSACTION);
    }

    /**
     * Create a <code>superstock.bank_exchange_transaction</code> table
     * reference
     */
    public BankExchangeTransaction() {
        this(DSL.name("bank_exchange_transaction"), null);
    }

    public <O extends Record> BankExchangeTransaction(Table<O> child, ForeignKey<O, BankExchangeTransactionRecord> key) {
        super(child, key, BANK_EXCHANGE_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Superstock.SUPERSTOCK;
    }

    @Override
    public Identity<BankExchangeTransactionRecord, Long> getIdentity() {
        return (Identity<BankExchangeTransactionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BankExchangeTransactionRecord> getPrimaryKey() {
        return Keys.KEY_BANK_EXCHANGE_TRANSACTION_PRIMARY;
    }

    @Override
    public BankExchangeTransaction as(String alias) {
        return new BankExchangeTransaction(DSL.name(alias), this);
    }

    @Override
    public BankExchangeTransaction as(Name alias) {
        return new BankExchangeTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankExchangeTransaction rename(String name) {
        return new BankExchangeTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankExchangeTransaction rename(Name name) {
        return new BankExchangeTransaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, String, String, BigDecimal, BigDecimal, BigDecimal, Timestamp, BigDecimal, Timestamp> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
