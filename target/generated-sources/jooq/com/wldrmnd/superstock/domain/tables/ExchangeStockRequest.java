/*
 * This file is generated by jOOQ.
 */
package com.wldrmnd.superstock.domain.tables;


import com.wldrmnd.superstock.domain.Indexes;
import com.wldrmnd.superstock.domain.Keys;
import com.wldrmnd.superstock.domain.Superstock;
import com.wldrmnd.superstock.domain.tables.records.ExchangeStockRequestRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeStockRequest extends TableImpl<ExchangeStockRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>superstock.exchange_stock_request</code>
     */
    public static final ExchangeStockRequest EXCHANGE_STOCK_REQUEST = new ExchangeStockRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangeStockRequestRecord> getRecordType() {
        return ExchangeStockRequestRecord.class;
    }

    /**
     * The column <code>superstock.exchange_stock_request.id</code>.
     */
    public final TableField<ExchangeStockRequestRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.user_id</code>.
     */
    public final TableField<ExchangeStockRequestRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.stock_id</code>.
     */
    public final TableField<ExchangeStockRequestRecord, Long> STOCK_ID = createField(DSL.name("stock_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.amount</code>.
     */
    public final TableField<ExchangeStockRequestRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.desired_price</code>.
     */
    public final TableField<ExchangeStockRequestRecord, BigDecimal> DESIRED_PRICE = createField(DSL.name("desired_price"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.created_at</code>.
     */
    public final TableField<ExchangeStockRequestRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(0).nullable(false), this, "");

    /**
     * The column <code>superstock.exchange_stock_request.executed_at</code>.
     */
    public final TableField<ExchangeStockRequestRecord, Timestamp> EXECUTED_AT = createField(DSL.name("executed_at"), SQLDataType.TIMESTAMP(0), this, "");

    private ExchangeStockRequest(Name alias, Table<ExchangeStockRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExchangeStockRequest(Name alias, Table<ExchangeStockRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>superstock.exchange_stock_request</code> table
     * reference
     */
    public ExchangeStockRequest(String alias) {
        this(DSL.name(alias), EXCHANGE_STOCK_REQUEST);
    }

    /**
     * Create an aliased <code>superstock.exchange_stock_request</code> table
     * reference
     */
    public ExchangeStockRequest(Name alias) {
        this(alias, EXCHANGE_STOCK_REQUEST);
    }

    /**
     * Create a <code>superstock.exchange_stock_request</code> table reference
     */
    public ExchangeStockRequest() {
        this(DSL.name("exchange_stock_request"), null);
    }

    public <O extends Record> ExchangeStockRequest(Table<O> child, ForeignKey<O, ExchangeStockRequestRecord> key) {
        super(child, key, EXCHANGE_STOCK_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Superstock.SUPERSTOCK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXCHANGE_STOCK_REQUEST_STOCK_ID, Indexes.EXCHANGE_STOCK_REQUEST_USER_ID);
    }

    @Override
    public Identity<ExchangeStockRequestRecord, Long> getIdentity() {
        return (Identity<ExchangeStockRequestRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExchangeStockRequestRecord> getPrimaryKey() {
        return Keys.KEY_EXCHANGE_STOCK_REQUEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<ExchangeStockRequestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXCHANGE_STOCK_REQUEST_IBFK_1, Keys.EXCHANGE_STOCK_REQUEST_IBFK_2);
    }

    private transient User _user;
    private transient Stock _stock;

    /**
     * Get the implicit join path to the <code>superstock.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.EXCHANGE_STOCK_REQUEST_IBFK_1);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>superstock.stock</code> table.
     */
    public Stock stock() {
        if (_stock == null)
            _stock = new Stock(this, Keys.EXCHANGE_STOCK_REQUEST_IBFK_2);

        return _stock;
    }

    @Override
    public ExchangeStockRequest as(String alias) {
        return new ExchangeStockRequest(DSL.name(alias), this);
    }

    @Override
    public ExchangeStockRequest as(Name alias) {
        return new ExchangeStockRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeStockRequest rename(String name) {
        return new ExchangeStockRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeStockRequest rename(Name name) {
        return new ExchangeStockRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, BigDecimal, BigDecimal, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
