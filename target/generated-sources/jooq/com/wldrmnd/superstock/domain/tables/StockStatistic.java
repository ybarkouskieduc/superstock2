/*
 * This file is generated by jOOQ.
 */
package com.wldrmnd.superstock.domain.tables;


import com.wldrmnd.superstock.domain.Indexes;
import com.wldrmnd.superstock.domain.Keys;
import com.wldrmnd.superstock.domain.Superstock;
import com.wldrmnd.superstock.domain.tables.records.StockStatisticRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StockStatistic extends TableImpl<StockStatisticRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>superstock.stock_statistic</code>
     */
    public static final StockStatistic STOCK_STATISTIC = new StockStatistic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StockStatisticRecord> getRecordType() {
        return StockStatisticRecord.class;
    }

    /**
     * The column <code>superstock.stock_statistic.id</code>.
     */
    public final TableField<StockStatisticRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>superstock.stock_statistic.stock_id</code>.
     */
    public final TableField<StockStatisticRecord, Long> STOCK_ID = createField(DSL.name("stock_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>superstock.stock_statistic.dividend</code>.
     */
    public final TableField<StockStatisticRecord, BigDecimal> DIVIDEND = createField(DSL.name("dividend"), SQLDataType.DECIMAL(3, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>superstock.stock_statistic.volume</code>.
     */
    public final TableField<StockStatisticRecord, Long> VOLUME = createField(DSL.name("volume"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>superstock.stock_statistic.market_value</code>.
     */
    public final TableField<StockStatisticRecord, BigDecimal> MARKET_VALUE = createField(DSL.name("market_value"), SQLDataType.DECIMAL(15, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    private StockStatistic(Name alias, Table<StockStatisticRecord> aliased) {
        this(alias, aliased, null);
    }

    private StockStatistic(Name alias, Table<StockStatisticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>superstock.stock_statistic</code> table reference
     */
    public StockStatistic(String alias) {
        this(DSL.name(alias), STOCK_STATISTIC);
    }

    /**
     * Create an aliased <code>superstock.stock_statistic</code> table reference
     */
    public StockStatistic(Name alias) {
        this(alias, STOCK_STATISTIC);
    }

    /**
     * Create a <code>superstock.stock_statistic</code> table reference
     */
    public StockStatistic() {
        this(DSL.name("stock_statistic"), null);
    }

    public <O extends Record> StockStatistic(Table<O> child, ForeignKey<O, StockStatisticRecord> key) {
        super(child, key, STOCK_STATISTIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Superstock.SUPERSTOCK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STOCK_STATISTIC_STOCK_ID);
    }

    @Override
    public Identity<StockStatisticRecord, Long> getIdentity() {
        return (Identity<StockStatisticRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StockStatisticRecord> getPrimaryKey() {
        return Keys.KEY_STOCK_STATISTIC_PRIMARY;
    }

    @Override
    public List<ForeignKey<StockStatisticRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STOCK_STATISTIC_IBFK_1);
    }

    private transient Stock _stock;

    /**
     * Get the implicit join path to the <code>superstock.stock</code> table.
     */
    public Stock stock() {
        if (_stock == null)
            _stock = new Stock(this, Keys.STOCK_STATISTIC_IBFK_1);

        return _stock;
    }

    @Override
    public StockStatistic as(String alias) {
        return new StockStatistic(DSL.name(alias), this);
    }

    @Override
    public StockStatistic as(Name alias) {
        return new StockStatistic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StockStatistic rename(String name) {
        return new StockStatistic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StockStatistic rename(Name name) {
        return new StockStatistic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, BigDecimal, Long, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
